package com.jarvis_abo.entities;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.jarvis_abo.entities.Notification;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "mbl_notification".
*/
public class NotificationDao extends AbstractDao<Notification, Long> {

    public static final String TABLENAME = "mbl_notification";

    /**
     * Properties of entity Notification.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Pk_id = new Property(0, Long.class, "pk_id", true, "PK_ID");
        public final static Property Lat = new Property(1, double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(2, double.class, "lng", false, "LNG");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Message = new Property(4, String.class, "message", false, "MESSAGE");
        public final static Property InactiveUntil = new Property(5, java.util.Date.class, "inactiveUntil", false, "INACTIVE_UNTIL");
        public final static Property Fk_user = new Property(6, long.class, "fk_user", false, "FK_USER");
    };

    private DaoSession daoSession;


    public NotificationDao(DaoConfig config) {
        super(config);
    }
    
    public NotificationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"mbl_notification\" (" + //
                "\"PK_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: pk_id
                "\"LAT\" REAL NOT NULL ," + // 1: lat
                "\"LNG\" REAL NOT NULL ," + // 2: lng
                "\"TYPE\" TEXT NOT NULL ," + // 3: type
                "\"MESSAGE\" TEXT NOT NULL ," + // 4: message
                "\"INACTIVE_UNTIL\" INTEGER," + // 5: inactiveUntil
                "\"FK_USER\" INTEGER NOT NULL );"); // 6: fk_user
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"mbl_notification\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Notification entity) {
        stmt.clearBindings();
 
        Long pk_id = entity.getPk_id();
        if (pk_id != null) {
            stmt.bindLong(1, pk_id);
        }
        stmt.bindDouble(2, entity.getLat());
        stmt.bindDouble(3, entity.getLng());
        stmt.bindString(4, entity.getType());
        stmt.bindString(5, entity.getMessage());
 
        java.util.Date inactiveUntil = entity.getInactiveUntil();
        if (inactiveUntil != null) {
            stmt.bindLong(6, inactiveUntil.getTime());
        }
        stmt.bindLong(7, entity.getFk_user());
    }

    @Override
    protected void attachEntity(Notification entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Notification readEntity(Cursor cursor, int offset) {
        Notification entity = new Notification( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // pk_id
            cursor.getDouble(offset + 1), // lat
            cursor.getDouble(offset + 2), // lng
            cursor.getString(offset + 3), // type
            cursor.getString(offset + 4), // message
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // inactiveUntil
            cursor.getLong(offset + 6) // fk_user
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Notification entity, int offset) {
        entity.setPk_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLat(cursor.getDouble(offset + 1));
        entity.setLng(cursor.getDouble(offset + 2));
        entity.setType(cursor.getString(offset + 3));
        entity.setMessage(cursor.getString(offset + 4));
        entity.setInactiveUntil(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setFk_user(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Notification entity, long rowId) {
        entity.setPk_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Notification entity) {
        if(entity != null) {
            return entity.getPk_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM mbl_notification T");
            builder.append(" LEFT JOIN mbl_user T0 ON T.\"FK_USER\"=T0.\"PK_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Notification loadCurrentDeep(Cursor cursor, boolean lock) {
        Notification entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(user != null) {
            entity.setUser(user);
        }

        return entity;    
    }

    public Notification loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Notification> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Notification> list = new ArrayList<Notification>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Notification> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Notification> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
